
Andreas Welly Octavianus_3541951_ARBKVS_Praktikum3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000202  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ad  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c1  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b2  00000000  00000000  0000112a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000013dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  0000183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  88:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
#include "avr/interrupt.h"

volatile uint32_t systemClock = 0;

void init(){
	DDRD = 0x03;		// output setzen
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  94:	1b b8       	out	0x0b, r1	; 11
  96:	08 95       	ret

00000098 <init_timer>:
}
void init_timer(){
	TCCR0A = (1<<WGM01); //set CTC(clear timer on compare match) bit
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00)|(1<<CS01); //prescaler als 64
  9c:	93 e0       	ldi	r25, 0x03	; 3
  9e:	95 bd       	out	0x25, r25	; 37
	OCR0A = 250;		//um 1ms zu erreichen braucht man 250 Ticks in 64 prescale
  a0:	9a ef       	ldi	r25, 0xFA	; 250
  a2:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);	//Set to use OCR0A as comparison
  a4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();
  a8:	78 94       	sei
  aa:	08 95       	ret

000000ac <waitFor>:
}

void waitFor(uint32_t ms){
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
	uint32_t endTime = systemClock+ms;
  b0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
  b4:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
  b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
  bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
  c0:	ab 01       	movw	r20, r22
  c2:	bc 01       	movw	r22, r24
  c4:	40 0f       	add	r20, r16
  c6:	51 1f       	adc	r21, r17
  c8:	62 1f       	adc	r22, r18
  ca:	73 1f       	adc	r23, r19
	while(systemClock != endTime){} //to avoid early exit incase overflow
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  d8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  dc:	48 17       	cp	r20, r24
  de:	59 07       	cpc	r21, r25
  e0:	6a 07       	cpc	r22, r26
  e2:	7b 07       	cpc	r23, r27
  e4:	99 f7       	brne	.-26     	; 0xcc <waitFor+0x20>
}
  e6:	1f 91       	pop	r17
  e8:	0f 91       	pop	r16
  ea:	08 95       	ret

000000ec <waitUntil>:

void waitUntil(uint32_t ms){
  ec:	ab 01       	movw	r20, r22
  ee:	bc 01       	movw	r22, r24
	while(systemClock <= ms){}
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  fc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 100:	48 17       	cp	r20, r24
 102:	59 07       	cpc	r21, r25
 104:	6a 07       	cpc	r22, r26
 106:	7b 07       	cpc	r23, r27
 108:	98 f7       	brcc	.-26     	; 0xf0 <waitUntil+0x4>
}
 10a:	08 95       	ret

0000010c <main>:

int main(void)
{
	init();
 10c:	0e 94 48 00 	call	0x90	; 0x90 <init>
	init_timer();
 110:	0e 94 4c 00 	call	0x98	; 0x98 <init_timer>
	PORTD = (1<<PORTD1);
 114:	c2 e0       	ldi	r28, 0x02	; 2
 116:	cb b9       	out	0x0b, r28	; 11
	waitUntil(2000);
 118:	60 ed       	ldi	r22, 0xD0	; 208
 11a:	77 e0       	ldi	r23, 0x07	; 7
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 76 00 	call	0xec	; 0xec <waitUntil>
	PORTD ^= (1<<PORTD1);
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	c8 27       	eor	r28, r24
 128:	cb b9       	out	0x0b, r28	; 11
	while(1){
		waitFor(500);
		PORTD ^= (1<<PORTD0);
 12a:	c1 e0       	ldi	r28, 0x01	; 1
	init_timer();
	PORTD = (1<<PORTD1);
	waitUntil(2000);
	PORTD ^= (1<<PORTD1);
	while(1){
		waitFor(500);
 12c:	64 ef       	ldi	r22, 0xF4	; 244
 12e:	71 e0       	ldi	r23, 0x01	; 1
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 56 00 	call	0xac	; 0xac <waitFor>
		PORTD ^= (1<<PORTD0);
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8c 27       	eor	r24, r28
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	f6 cf       	rjmp	.-20     	; 0x12c <main+0x20>

00000140 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
	systemClock++;		//systemclock +1 every ms
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 15a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 15e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	a1 1d       	adc	r26, r1
 166:	b1 1d       	adc	r27, r1
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 16c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 170:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 174:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
