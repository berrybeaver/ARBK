
Andreas Welly Octavianus_3541951_ARBKVS_Praktikum4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000002fc  00000390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800114  00800114  000003a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000925  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007fd  00000000  00000000  00000db9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000454  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  00001a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f9  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000132  00000000  00000000  00001efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  9e:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_interrupt>:
 *  Author: welly
 */ 
#include "keys.h"
volatile uint32_t systemClock=0;
void init_interrupt(){
	cli();
  a6:	f8 94       	cli
	PCICR = (1<<PCIE0);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0=(1<<PCINT1)|(1<<PCINT2);
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	/*timer*/
	TCCR0A = (1<<WGM01); //set CTC(clear timer on compare match) bit
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS00)|(1<<CS01); //prescaler als 64
  b8:	93 e0       	ldi	r25, 0x03	; 3
  ba:	95 bd       	out	0x25, r25	; 37
	OCR0A = 249;		//um 1ms zu erreichen braucht man 250 Ticks in 64 prescale
  bc:	99 ef       	ldi	r25, 0xF9	; 249
  be:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1<<OCIE0A);	//Set to use OCR0A as comparison
  c0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	sei();
  c4:	78 94       	sei
  c6:	08 95       	ret

000000c8 <waitFor>:
}

void waitFor(uint32_t ms){
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
	uint32_t endTime = systemClock+ms;
  cc:	00 91 14 01 	lds	r16, 0x0114	; 0x800114 <__data_end>
  d0:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <__data_end+0x1>
  d4:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__data_end+0x2>
  d8:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__data_end+0x3>
  dc:	ab 01       	movw	r20, r22
  de:	bc 01       	movw	r22, r24
  e0:	40 0f       	add	r20, r16
  e2:	51 1f       	adc	r21, r17
  e4:	62 1f       	adc	r22, r18
  e6:	73 1f       	adc	r23, r19
	while(systemClock != endTime){} //to avoid early exit incase overflow
  e8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  ec:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
  f0:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
  f4:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
  f8:	48 17       	cp	r20, r24
  fa:	59 07       	cpc	r21, r25
  fc:	6a 07       	cpc	r22, r26
  fe:	7b 07       	cpc	r23, r27
 100:	99 f7       	brne	.-26     	; 0xe8 <waitFor+0x20>
}
 102:	1f 91       	pop	r17
 104:	0f 91       	pop	r16
 106:	08 95       	ret

00000108 <__vector_14>:
ISR(TIMER0_COMPA_vect){
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
	systemClock++;		//system clock +1 every ms
 11a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 11e:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 122:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 126:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 12a:	01 96       	adiw	r24, 0x01	; 1
 12c:	a1 1d       	adc	r26, r1
 12e:	b1 1d       	adc	r27, r1
 130:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 134:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 138:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 13c:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
}
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_3>:
#include "keys.h"
#include "sevenseg.h"


volatile uint32_t count = 0;
ISR(PCINT0_vect){														//Interrupt Routine
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
	if(!(PINB & (1<<PINB1))){											//if SW1 pressed
 164:	19 99       	sbic	0x03, 1	; 3
 166:	2c c0       	rjmp	.+88     	; 0x1c0 <__vector_3+0x6e>
		if(count == 0){
 168:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count>
 16c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x1>
 170:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <count+0x2>
 174:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <count+0x3>
 178:	89 2b       	or	r24, r25
 17a:	8a 2b       	or	r24, r26
 17c:	8b 2b       	or	r24, r27
 17e:	69 f4       	brne	.+26     	; 0x19a <__vector_3+0x48>
			count =99;
 180:	83 e6       	ldi	r24, 0x63	; 99
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count>
 18c:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count+0x1>
 190:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <count+0x2>
 194:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <count+0x3>
 198:	13 c0       	rjmp	.+38     	; 0x1c0 <__vector_3+0x6e>
			}else{
			count--;;
 19a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count>
 19e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x1>
 1a2:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <count+0x2>
 1a6:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <count+0x3>
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	a1 09       	sbc	r26, r1
 1ae:	b1 09       	sbc	r27, r1
 1b0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count>
 1b4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count+0x1>
 1b8:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <count+0x2>
 1bc:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <count+0x3>
		}
	}
	if(!(PINB & (1<<PINB2))){											//if SW2 pressed
 1c0:	1a 99       	sbic	0x03, 2	; 3
 1c2:	29 c0       	rjmp	.+82     	; 0x216 <__vector_3+0xc4>
		if(count == 99){
 1c4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count>
 1c8:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x1>
 1cc:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <count+0x2>
 1d0:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <count+0x3>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	91 05       	cpc	r25, r1
 1d8:	a1 05       	cpc	r26, r1
 1da:	b1 05       	cpc	r27, r1
 1dc:	49 f4       	brne	.+18     	; 0x1f0 <__vector_3+0x9e>
			count =0;
 1de:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <count>
 1e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <count+0x1>
 1e6:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <count+0x2>
 1ea:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <count+0x3>
 1ee:	13 c0       	rjmp	.+38     	; 0x216 <__vector_3+0xc4>
			}else{
			count++;
 1f0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <count>
 1f4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <count+0x1>
 1f8:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <count+0x2>
 1fc:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <count+0x3>
 200:	01 96       	adiw	r24, 0x01	; 1
 202:	a1 1d       	adc	r26, r1
 204:	b1 1d       	adc	r27, r1
 206:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <count>
 20a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <count+0x1>
 20e:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <count+0x2>
 212:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <count+0x3>
		}
	}
}
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <init>:
	PD0 = g
	PD1 = A
 */

void init(){
	DDRD=0xff;															//PORTD as output
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00;														
 22c:	1b b8       	out	0x0b, r1	; 11
	
	DDRB = 0x01;														//PINB 0 as output and the rest are input
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<PINB1)|(1<<PINB2);										//set bit for both inputs
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	85 b9       	out	0x05, r24	; 5
 236:	08 95       	ret

00000238 <main>:
}
	
int main(void)
{
	init();
 238:	0e 94 14 01 	call	0x228	; 0x228 <init>
	init_interrupt();
 23c:	0e 94 53 00 	call	0xa6	; 0xa6 <init_interrupt>
    while (1) 
    {
		int y = count%10;
		int x = count/10; 
		out(y);
 240:	0f 2e       	mov	r0, r31
 242:	fa e0       	ldi	r31, 0x0A	; 10
 244:	cf 2e       	mov	r12, r31
 246:	d1 2c       	mov	r13, r1
 248:	e1 2c       	mov	r14, r1
 24a:	f1 2c       	mov	r15, r1
 24c:	f0 2d       	mov	r31, r0
{
	init();
	init_interrupt();
    while (1) 
    {
		int y = count%10;
 24e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <count>
 252:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <count+0x1>
 256:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <count+0x2>
 25a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <count+0x3>
		int x = count/10; 
 25e:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <count>
 262:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <count+0x1>
 266:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <count+0x2>
 26a:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <count+0x3>
		out(y);
 26e:	a7 01       	movw	r20, r14
 270:	96 01       	movw	r18, r12
 272:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__udivmodsi4>
 276:	cb 01       	movw	r24, r22
 278:	0e 94 48 01 	call	0x290	; 0x290 <out>
		out(x);
 27c:	c5 01       	movw	r24, r10
 27e:	b4 01       	movw	r22, r8
 280:	a7 01       	movw	r20, r14
 282:	96 01       	movw	r18, r12
 284:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__udivmodsi4>
 288:	c9 01       	movw	r24, r18
 28a:	0e 94 48 01 	call	0x290	; 0x290 <out>
 28e:	df cf       	rjmp	.-66     	; 0x24e <main+0x16>

00000290 <out>:

	
int number[10] ={ 64, 121, 36, 48, 25, 18, 2, 120, 0, 16};
	
void out(int x){
	PORTD = number[x];
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	fc 01       	movw	r30, r24
 296:	e0 50       	subi	r30, 0x00	; 0
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	80 81       	ld	r24, Z
 29c:	8b b9       	out	0x0b, r24	; 11
	//_delay_ms(10);
	waitFor(10);
 29e:	6a e0       	ldi	r22, 0x0A	; 10
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 64 00 	call	0xc8	; 0xc8 <waitFor>
	PORTB ^= (1<<PINB0);
 2aa:	95 b1       	in	r25, 0x05	; 5
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	89 27       	eor	r24, r25
 2b0:	85 b9       	out	0x05, r24	; 5
 2b2:	08 95       	ret

000002b4 <__udivmodsi4>:
 2b4:	a1 e2       	ldi	r26, 0x21	; 33
 2b6:	1a 2e       	mov	r1, r26
 2b8:	aa 1b       	sub	r26, r26
 2ba:	bb 1b       	sub	r27, r27
 2bc:	fd 01       	movw	r30, r26
 2be:	0d c0       	rjmp	.+26     	; 0x2da <__udivmodsi4_ep>

000002c0 <__udivmodsi4_loop>:
 2c0:	aa 1f       	adc	r26, r26
 2c2:	bb 1f       	adc	r27, r27
 2c4:	ee 1f       	adc	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	a2 17       	cp	r26, r18
 2ca:	b3 07       	cpc	r27, r19
 2cc:	e4 07       	cpc	r30, r20
 2ce:	f5 07       	cpc	r31, r21
 2d0:	20 f0       	brcs	.+8      	; 0x2da <__udivmodsi4_ep>
 2d2:	a2 1b       	sub	r26, r18
 2d4:	b3 0b       	sbc	r27, r19
 2d6:	e4 0b       	sbc	r30, r20
 2d8:	f5 0b       	sbc	r31, r21

000002da <__udivmodsi4_ep>:
 2da:	66 1f       	adc	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	88 1f       	adc	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	1a 94       	dec	r1
 2e4:	69 f7       	brne	.-38     	; 0x2c0 <__udivmodsi4_loop>
 2e6:	60 95       	com	r22
 2e8:	70 95       	com	r23
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	9b 01       	movw	r18, r22
 2f0:	ac 01       	movw	r20, r24
 2f2:	bd 01       	movw	r22, r26
 2f4:	cf 01       	movw	r24, r30
 2f6:	08 95       	ret

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
