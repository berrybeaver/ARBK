
prak4test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  0000028a  0000031e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800128  00800128  00000346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000924  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d2  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000466  00000000  00000000  00001526  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014b  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001fc5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__vector_1>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 43 01 	jmp	0x286	; 0x286 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_interrupt>:
 *  Author: welly
 */ 
#include "keys.h"

void init_interrupt(){
	cli();							//clear interrupt flag
  a6:	f8 94       	cli
	EICRA = (1<<ISC11)|(1<<ISC01);	//set the control on INT0 & INT1 to falling edge->generate interrupt
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (1<<INT0)|(1<<INT1);	//enable external interrupt from INT0&INT1
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	8d bb       	out	0x1d, r24	; 29
	sei();							//set global interrupt flag
  b2:	78 94       	sei
  b4:	08 95       	ret

000000b6 <__vector_1>:

#include "keys.h"
#include "sevenseg.h"

volatile uint32_t count = 0;
ISR(INT0_vect) { // SW1
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
	if (count == 0) {
  c8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
  cc:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
  d0:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__data_end+0x2>
  d4:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__data_end+0x3>
  d8:	89 2b       	or	r24, r25
  da:	8a 2b       	or	r24, r26
  dc:	8b 2b       	or	r24, r27
  de:	69 f4       	brne	.+26     	; 0xfa <__vector_1+0x44>
		count = 99;
  e0:	83 e6       	ldi	r24, 0x63	; 99
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
  ec:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
  f0:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__data_end+0x2>
  f4:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__data_end+0x3>
  f8:	13 c0       	rjmp	.+38     	; 0x120 <__vector_1+0x6a>
	}
	else {
		count--;
  fa:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
  fe:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 102:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__data_end+0x2>
 106:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__data_end+0x3>
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	a1 09       	sbc	r26, r1
 10e:	b1 09       	sbc	r27, r1
 110:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 114:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 118:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__data_end+0x2>
 11c:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__data_end+0x3>
	}
}
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_2>:

ISR(INT1_vect) { // SW2
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
	if (count == 99) {
 144:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 148:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 14c:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__data_end+0x2>
 150:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__data_end+0x3>
 154:	83 36       	cpi	r24, 0x63	; 99
 156:	91 05       	cpc	r25, r1
 158:	a1 05       	cpc	r26, r1
 15a:	b1 05       	cpc	r27, r1
 15c:	49 f4       	brne	.+18     	; 0x170 <__vector_2+0x3e>
		count = 0;
 15e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
 162:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x1>
 166:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end+0x2>
 16a:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__data_end+0x3>
 16e:	13 c0       	rjmp	.+38     	; 0x196 <__vector_2+0x64>
	}
	else {
		count++;
 170:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <__data_end>
 174:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <__data_end+0x1>
 178:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <__data_end+0x2>
 17c:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <__data_end+0x3>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	a1 1d       	adc	r26, r1
 184:	b1 1d       	adc	r27, r1
 186:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
 18a:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 18e:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <__data_end+0x2>
 192:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <__data_end+0x3>
	}
}
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <init>:
	PD0 = g
	PD1 = A
 */
void init(){
	
	DDRD = 0b00000011; // PD2 & PD3 as input, PD0 & PD1 as output
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<PIND2)|(1<<PIND3); // Enable pull-up resistors for PD2&PD3
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xff; //PB AS OUTPUT
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	84 b9       	out	0x04, r24	; 4
 1b4:	08 95       	ret

000001b6 <main>:
}

int main(void)
{
    init();
 1b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <init>
    init_interrupt();
 1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <init_interrupt>
    while (1)
    {
	    int y = count%10; //xy
	    int x = count/10;	//xy
	    out(y);
 1be:	0f 2e       	mov	r0, r31
 1c0:	fa e0       	ldi	r31, 0x0A	; 10
 1c2:	cf 2e       	mov	r12, r31
 1c4:	d1 2c       	mov	r13, r1
 1c6:	e1 2c       	mov	r14, r1
 1c8:	f1 2c       	mov	r15, r1
 1ca:	f0 2d       	mov	r31, r0
{
    init();
    init_interrupt();
    while (1)
    {
	    int y = count%10; //xy
 1cc:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <__data_end>
 1d0:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <__data_end+0x1>
 1d4:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end+0x2>
 1d8:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__data_end+0x3>
	    int x = count/10;	//xy
 1dc:	80 90 28 01 	lds	r8, 0x0128	; 0x800128 <__data_end>
 1e0:	90 90 29 01 	lds	r9, 0x0129	; 0x800129 <__data_end+0x1>
 1e4:	a0 90 2a 01 	lds	r10, 0x012A	; 0x80012a <__data_end+0x2>
 1e8:	b0 90 2b 01 	lds	r11, 0x012B	; 0x80012b <__data_end+0x3>
	    out(y);
 1ec:	a7 01       	movw	r20, r14
 1ee:	96 01       	movw	r18, r12
 1f0:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodsi4>
 1f4:	cb 01       	movw	r24, r22
 1f6:	0e 94 07 01 	call	0x20e	; 0x20e <out>
	    out(x);
 1fa:	c5 01       	movw	r24, r10
 1fc:	b4 01       	movw	r22, r8
 1fe:	a7 01       	movw	r20, r14
 200:	96 01       	movw	r18, r12
 202:	0e 94 21 01 	call	0x242	; 0x242 <__udivmodsi4>
 206:	c9 01       	movw	r24, r18
 208:	0e 94 07 01 	call	0x20e	; 0x20e <out>
 20c:	df cf       	rjmp	.-66     	; 0x1cc <main+0x16>

0000020e <out>:
int numberd[10]={1, 1, 0, 0, 0, 0, 0, 1, 0, 0};
	

	
void out(int x){
	PORTB = numberb[x];
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	fc 01       	movw	r30, r24
 214:	ec 5e       	subi	r30, 0xEC	; 236
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	20 81       	ld	r18, Z
 21a:	25 b9       	out	0x05, r18	; 5
	PORTD = numberd[x];
 21c:	fc 01       	movw	r30, r24
 21e:	e0 50       	subi	r30, 0x00	; 0
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	80 81       	ld	r24, Z
 224:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	89 ef       	ldi	r24, 0xF9	; 249
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <out+0x1e>
 234:	00 c0       	rjmp	.+0      	; 0x236 <out+0x28>
 236:	00 00       	nop
	_delay_ms(20);
	//PORTB ^= (1<<PINB0);
	PORTD ^=(1<<PIND1);
 238:	9b b1       	in	r25, 0x0b	; 11
 23a:	82 e0       	ldi	r24, 0x02	; 2
 23c:	89 27       	eor	r24, r25
 23e:	8b b9       	out	0x0b, r24	; 11
 240:	08 95       	ret

00000242 <__udivmodsi4>:
 242:	a1 e2       	ldi	r26, 0x21	; 33
 244:	1a 2e       	mov	r1, r26
 246:	aa 1b       	sub	r26, r26
 248:	bb 1b       	sub	r27, r27
 24a:	fd 01       	movw	r30, r26
 24c:	0d c0       	rjmp	.+26     	; 0x268 <__udivmodsi4_ep>

0000024e <__udivmodsi4_loop>:
 24e:	aa 1f       	adc	r26, r26
 250:	bb 1f       	adc	r27, r27
 252:	ee 1f       	adc	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	a2 17       	cp	r26, r18
 258:	b3 07       	cpc	r27, r19
 25a:	e4 07       	cpc	r30, r20
 25c:	f5 07       	cpc	r31, r21
 25e:	20 f0       	brcs	.+8      	; 0x268 <__udivmodsi4_ep>
 260:	a2 1b       	sub	r26, r18
 262:	b3 0b       	sbc	r27, r19
 264:	e4 0b       	sbc	r30, r20
 266:	f5 0b       	sbc	r31, r21

00000268 <__udivmodsi4_ep>:
 268:	66 1f       	adc	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	88 1f       	adc	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	1a 94       	dec	r1
 272:	69 f7       	brne	.-38     	; 0x24e <__udivmodsi4_loop>
 274:	60 95       	com	r22
 276:	70 95       	com	r23
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	9b 01       	movw	r18, r22
 27e:	ac 01       	movw	r20, r24
 280:	bd 01       	movw	r22, r26
 282:	cf 01       	movw	r24, r30
 284:	08 95       	ret

00000286 <_exit>:
 286:	f8 94       	cli

00000288 <__stop_program>:
 288:	ff cf       	rjmp	.-2      	; 0x288 <__stop_program>
